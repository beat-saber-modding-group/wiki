name: Wiki CI
on:
  push:
    branches-ignore:
      - 'cwdin_**'

env:
  DEPLOY_URL: 'https://bsmg.wiki/'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Prepare
        id: prepare
        run: |
          IMAGE_NAME=wiki

          DOCKER_USER=`echo ${{ github.repository }} | cut -d "/" -f 1 | tr '[:upper:]' '[:lower:]'`
          DOCKER_REPO=`echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'`
          DOCKER_IMAGE=docker.pkg.github.com/$DOCKER_REPO/$IMAGE_NAME

          VERSION=`git rev-parse --short HEAD`
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          echo ::set-output name=docker_user::${DOCKER_USER}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
      - name: Setup Docker Buildx
        uses:  docker/setup-buildx-action@v1
      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image
        run: |
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=docker" \
            --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \
            --file Dockerfile .
      - name: Login to Docker Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com --username ${{ steps.prepare.outputs.docker_user }} --password-stdin
      - name: Push to Docker Registry
        if: github.ref == 'refs/heads/master'
        run: docker push ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
  deploy:
    if: github.ref == 'refs/heads/master'
    needs: build
    runs-on: ubuntu-20.04
    env:
      ENABLE: ${{ secrets.ENABLE_CI_DEPLOY }}
    steps:
      - name: Skipping Deployment Warning
        if: env.ENABLE != '1ENABLED'
        run: echo "::warning::ENABLE_CI_DEPLOY Secret not set to 1ENABLED, skipping deployment..."
      - name: Checkout
        if: env.ENABLE == '1ENABLED'
        uses: actions/checkout@v2
      - name: Create Deployment
        if: env.ENABLE == '1ENABLED'
        uses: chrnorm/deployment-action@releases/v1
        id: deployment
        with:
          token: '${{ github.token }}'
          environment: production
          target_url: ${{ env.DEPLOY_URL }}
      - name: Deploy Wiki
        if: env.ENABLE == '1ENABLED'
        run: "curl --fail -X POST -H 'Authorization: Bearer ${{ secrets.HOOK_TOKEN }}' -d `git rev-parse --short HEAD` '${{ secrets.HOOK_URL }}'"
      - name: Update Deployment (Success)
        if: env.ENABLE == '1ENABLED' && success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: '${{ github.token }}'
          state: success
          target_url: ${{ env.DEPLOY_URL }}
      - name: Update Deployment (Failure)
        if: env.ENABLE == '1ENABLED' && failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: '${{ github.token }}'
          state: failure
          target_url: ${{ env.DEPLOY_URL }}
